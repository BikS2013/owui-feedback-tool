# Multi-stage build for unified frontend and backend

# Stage 1: Build frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy frontend package files
COPY package*.json ./
RUN npm ci

# Copy frontend source
COPY . .

# Build frontend
RUN npm run build

# Stage 2: Build backend
FROM node:18-alpine AS backend-builder

WORKDIR /app

# Copy backend package files
COPY backend/package*.json ./
RUN npm ci

# Copy backend source
COPY backend/ .

# Build backend
RUN npm run build

# Stage 3: Production image
FROM node:18-alpine

# Install nginx, supervisor, and Chromium for Puppeteer
RUN apk add --no-cache \
    nginx \
    supervisor \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    font-noto \
    font-noto-cjk

# Tell Puppeteer to use installed Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Create app directory
WORKDIR /app

# Copy backend production files
COPY --from=backend-builder /app/dist ./backend/dist
COPY --from=backend-builder /app/node_modules ./backend/node_modules
COPY backend/package*.json ./backend/
COPY backend/llm-config.yaml ./backend/

# Copy frontend build
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# Copy default feedback data
COPY public/feedback-history-export.json /usr/share/nginx/html/

# Copy nginx configuration
COPY nginx.unified.conf /etc/nginx/http.d/default.conf

# Copy supervisord configuration
COPY supervisord.conf /etc/supervisord.conf

# Create nginx user and directories
RUN adduser -D -H -s /sbin/nologin nginx && \
    mkdir -p /run/nginx && \
    chown -R nginx:nginx /var/lib/nginx /var/log/nginx /run/nginx

# Expose port
EXPOSE 80

# Start supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]